// game.js

let socket = null;
let playerId = null;        // –¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞
let roomId = null;          // –¢–µ–∫—É—â–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞
let players = {};           // –î–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º {id: {nickname, hand: []}}

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const leftPlayerName = document.getElementById('left-player-name');
const rightPlayerName = document.getElementById('right-player-name');
const bottomPlayerName = document.getElementById('bottom-player-name');

const leftPlayerHand = document.getElementById('left-player-hand');
const rightPlayerHand = document.getElementById('right-player-hand');
const bottomPlayerHand = document.getElementById('bottom-player-hand');

const doorDeck = document.getElementById('door-deck');
const treasureDeck = document.getElementById('treasure-deck');

const centerArea = document.getElementById('center-area');

function connectWebSocket() {
  socket = new WebSocket('ws://localhost:3000');

  socket.onopen = () => {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –∏–≥—Ä–µ');
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ
    if (roomId && playerId) {
      socket.send(JSON.stringify({ type: 'join-game', roomId, playerId }));
    }
  };

  socket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

    switch (data.type) {
      case 'init-game':
        // –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: –∫–æ–º–Ω–∞—Ç–∞, –∏–≥—Ä–æ–∫–∏, —Ç–≤–æ–π ID
        roomId = data.roomId;
        playerId = data.playerId;
        players = data.players; // {id: {nickname, hand: []}}

        updatePlayersUI();
        showMessage(`–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}`);
        break;

      case 'update-players':
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        players = data.players;
        updatePlayersUI();
        break;

      case 'game-message':
        // –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä
        showMessage(data.message);
        break;

      case 'error':
        showMessage(`–û—à–∏–±–∫–∞: ${data.message}`, true);
        break;

      // –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ case –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Ä—Ç—ã, —Ö–æ–¥ –∏ —Ç.–ø.)
    }
  };

  socket.onerror = (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', err);
    showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', true);
  };

  socket.onclose = () => {
    console.warn('üîå WebSocket –æ—Ç–∫–ª—é—á—ë–Ω');
    showMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', true);
  };
}

function updatePlayersUI() {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ –º–µ—Å—Ç–∞–º

  // –°–æ–∑–¥–∞–¥–∏–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ id
  const ids = Object.keys(players);
  if (!playerId || !ids.includes(playerId)) {
    return showMessage('–û—à–∏–±–∫–∞: –≤–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤', true);
  }

  // –ü–æ–∑–∏—Ü–∏—è —Ç–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
  const myIndex = ids.indexOf(playerId);

  // –î–ª—è 3 –∏–≥—Ä–æ–∫–æ–≤:
  // left: (myIndex + 1) % 3
  // right: (myIndex + 2) % 3

  const leftIndex = (myIndex + 1) % ids.length;
  const rightIndex = (myIndex + 2) % ids.length;

  const leftPlayer = players[ids[leftIndex]];
  const rightPlayer = players[ids[rightIndex]];
  const bottomPlayer = players[playerId];

  // –û–±–Ω–æ–≤–∏–º –∏–º–µ–Ω–∞
  leftPlayerName.textContent = leftPlayer.nickname || '–ò–≥—Ä–æ–∫ —Å–ª–µ–≤–∞';
  rightPlayerName.textContent = rightPlayer.nickname || '–ò–≥—Ä–æ–∫ —Å–ø—Ä–∞–≤–∞';
  bottomPlayerName.textContent = bottomPlayer.nickname || '–í—ã';

  // –û–±–Ω–æ–≤–∏–º —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ (–ø—Ä–æ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–∏–º)
  updateHandUI(leftPlayerHand, leftPlayer.hand.length, false);
  updateHandUI(rightPlayerHand, rightPlayer.hand.length, false);

  // –î–ª—è —Å–µ–±—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
  updateHandUI(bottomPlayerHand, bottomPlayer.hand, true);
}

function updateHandUI(container, handData, showCards) {
  container.innerHTML = '';

  if (Array.isArray(handData)) {
    // handData ‚Äî –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç (–¥–ª—è —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
    if (showCards) {
      handData.forEach(card => {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'card';
        cardDiv.textContent = card.name || '–ö–∞—Ä—Ç–∞';
        container.appendChild(cardDiv);
      });
    }
  } else if (typeof handData === 'number') {
    // handData ‚Äî —á–∏—Å–ª–æ –∫–∞—Ä—Ç (–¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)
    for (let i = 0; i < handData; i++) {
      const cardBack = document.createElement('div');
      cardBack.className = 'card';
      cardBack.style.backgroundColor = '#444';
      cardBack.textContent = 'üÇ†';
      container.appendChild(cardBack);
    }
  }
}

function showMessage(text, isError = false) {
  centerArea.innerHTML = `<p style="color:${isError ? 'red' : 'black'};">${text}</p>`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–æ–ª–æ–¥—ã
doorDeck.addEventListener('click', () => {
  if (!socket || socket.readyState !== WebSocket.OPEN) {
    return showMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', true);
  }
  socket.send(JSON.stringify({ type: 'draw-door-card', roomId, playerId }));
});

treasureDeck.addEventListener('click', () => {
  if (!socket || socket.readyState !== WebSocket.OPEN) {
    return showMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', true);
  }
  socket.send(JSON.stringify({ type: 'draw-treasure-card', roomId, playerId }));
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
  // –ü–æ–ª—É—á–∞–µ–º roomId –∏ playerId –∏–∑ localStorage –∏–ª–∏ URL (–∫–∞–∫ —É —Ç–µ–±—è –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ)
  roomId = localStorage.getItem('currentRoomId');
  playerId = localStorage.getItem('playerId');

  if (!roomId || !playerId) {
    showMessage('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ ID –∏–≥—Ä–æ–∫–∞', true);
    return;
  }

  connectWebSocket();
});
