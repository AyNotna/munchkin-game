// game.js

let socket = null;
let playerId = null;
let roomId = null;
let players = {};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateHandUI(container, handData, showCards) {
  container.innerHTML = '';

  if (Array.isArray(handData)) {
    if (showCards) {
      handData.forEach(card => {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'card';
        cardDiv.textContent = card.name || '–ö–∞—Ä—Ç–∞';
        container.appendChild(cardDiv);
      });
    }
  } else if (typeof handData === 'number') {
    for (let i = 0; i < handData; i++) {
      const cardBack = document.createElement('div');
      cardBack.className = 'card';
      cardBack.style.backgroundColor = '#444';
      cardBack.textContent = 'üÇ†';
      container.appendChild(cardBack);
    }
  }
}

function renderDoorCard(card) {
  const display = document.createElement('div');
  display.id = 'door-card-display';

  const cardDiv = document.createElement('div');
  cardDiv.className = 'card-large';

  const name = document.createElement('div');
  name.className = 'name';
  name.textContent = card.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
  cardDiv.appendChild(name);

  if (card.type === 'monster') {
    const level = document.createElement('div');
    level.className = 'level';
    level.textContent = `–£—Ä–æ–≤–µ–Ω—å: ${card.level}`;
    cardDiv.appendChild(level);

    const effect = document.createElement('div');
    effect.className = 'effect';
    effect.textContent = `–≠—Ñ—Ñ–µ–∫—Ç: ${card.effect || '‚Äî'}`;
    cardDiv.appendChild(effect);

    if (card.bonus_against) {
      const bonus = document.createElement('div');
      bonus.className = 'effect';
      bonus.textContent = `–ë–æ–Ω—É—Å –ø—Ä–æ—Ç–∏–≤: ${card.bonus_against}`;
      cardDiv.appendChild(bonus);
    }

    const bad = document.createElement('div');
    bad.className = 'bad-stuff';
    bad.textContent = `–ù–µ–ø–æ—Ç—Ä–µ–±—Å—Ç–≤–æ: ${card.bad_stuff || '‚Äî'}`;
    cardDiv.appendChild(bad);

    const footer = document.createElement('div');
    footer.className = 'footer';
    footer.innerHTML = `<span>+${card.reward_level || 0} —É—Ä–æ–≤–µ–Ω—å(—è)</span><span>üí∞ ${card.reward_treasure || 0}</span>`;
    cardDiv.appendChild(footer);
  } else if (card.type === 'curse') {
    const description = document.createElement('div');
    description.className = 'description';
    description.textContent = `–û–ø–∏—Å–∞–Ω–∏–µ: ${card.description || '‚Äî'}`;
    cardDiv.appendChild(description);

    if (card.effect) {
      const effect = document.createElement('div');
      effect.className = 'effect';
      effect.textContent = `–≠—Ñ—Ñ–µ–∫—Ç: ${card.effect}`;
      cardDiv.appendChild(effect);
    }
  }

  display.appendChild(cardDiv);

  const centerArea = document.getElementById('center-area');
  centerArea.innerHTML = '';
  centerArea.appendChild(display);
}

function showMessage(text, isError = false) {
  const centerArea = document.getElementById('center-area');
  centerArea.innerHTML = `<p style="color:${isError ? 'red' : 'black'};">${text}</p>`;
}

window.addEventListener('DOMContentLoaded', () => {
  // DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
  const leftPlayerName = document.getElementById('left-player-name');
  const rightPlayerName = document.getElementById('right-player-name');
  const bottomPlayerName = document.getElementById('bottom-player-name');

  const leftPlayerHand = document.getElementById('left-player-hand');
  const rightPlayerHand = document.getElementById('right-player-hand');
  const bottomPlayerHand = document.getElementById('bottom-player-hand');

  const doorDeck = document.getElementById('door-deck');
  const treasureDeck = document.getElementById('treasure-deck');

  const centerArea = document.getElementById('center-area');

  playerId = localStorage.getItem('playerId');
  roomId = localStorage.getItem('currentRoomId');
  const nickname = localStorage.getItem('nickname');

  if (!roomId || !playerId || !nickname) {
    showMessage('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∫–æ–º–Ω–∞—Ç—ã', true);
    return;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
  socket = new WebSocket('ws://localhost:3000');

  socket.onopen = () => {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω');
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    socket.send(JSON.stringify({ type: 'join-room', roomId, nickname }));
  };

  socket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('üì® –û—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

    switch (data.type) {
      case 'init-game':
        roomId = data.roomId;
        playerId = data.playerId;
        players = data.players;
        updatePlayersUI();
        showMessage(`–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}`);
        break;

      case 'update-players':
        players = data.players;
        updatePlayersUI();
        break;

      case 'game-message':
        showMessage(data.message);
        break;

      case 'error':
        showMessage(`–û—à–∏–±–∫–∞: ${data.message}`, true);
        break;

      case 'door-card-drawn':
        renderDoorCard(data.card);
        break;

      // –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  };

  socket.onerror = (err) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', err);
    showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', true);
  };

  socket.onclose = () => {
    console.warn('üîå WebSocket –æ—Ç–∫–ª—é—á—ë–Ω');
    showMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', true);
  };

  // –ö–ª–∏–∫ –ø–æ –∫–æ–ª–æ–¥–µ –¥–≤–µ—Ä–µ–π
  doorDeck.addEventListener('click', () => {
    if (!socket || socket.readyState !== WebSocket.OPEN) {
      return showMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', true);
    }
    socket.send(JSON.stringify({ type: 'draw-door-card', roomId, playerId }));
  });

  // –ö–ª–∏–∫ –ø–æ –∫–æ–ª–æ–¥–µ —Å–æ–∫—Ä–æ–≤–∏—â
  treasureDeck.addEventListener('click', () => {
    if (!socket || socket.readyState !== WebSocket.OPEN) {
      return showMessage('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', true);
    }
    socket.send(JSON.stringify({ type: 'draw-treasure-card', roomId, playerId }));
  });

  function updatePlayersUI() {
    const ids = Object.keys(players);
    if (!playerId || !ids.includes(playerId)) {
      return showMessage('–û—à–∏–±–∫–∞: –≤–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤', true);
    }

    const myIndex = ids.indexOf(playerId);
    const leftIndex = (myIndex + 1) % ids.length;
    const rightIndex = (myIndex + 2) % ids.length;

    const leftPlayer = players[ids[leftIndex]];
    const rightPlayer = players[ids[rightIndex]];
    const bottomPlayer = players[playerId];

    leftPlayerName.textContent = leftPlayer.nickname || '–ò–≥—Ä–æ–∫ —Å–ª–µ–≤–∞';
    rightPlayerName.textContent = rightPlayer.nickname || '–ò–≥—Ä–æ–∫ —Å–ø—Ä–∞–≤–∞';
    bottomPlayerName.textContent = bottomPlayer.nickname || '–í—ã';

    updateHandUI(leftPlayerHand, leftPlayer.hand.length, false);
    updateHandUI(rightPlayerHand, rightPlayer.hand.length, false);
    updateHandUI(bottomPlayerHand, bottomPlayer.hand, true);
  }
});
